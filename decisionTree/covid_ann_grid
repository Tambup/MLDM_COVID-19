{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.2"
    },
    "colab": {
      "name": "covid_ann_grid.ipynb",
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tomawock/MLDM_COVID-19/blob/master/decisionTree/covid_ann_grid.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p_4KfZO8_uz4",
        "colab_type": "text"
      },
      "source": [
        "# COVID-DIVIDIAMO\n",
        "\n",
        "## CREAZIONE DI MODELLI basati su ANN con GRID SEARCH\n",
        "\n",
        "Questo notebook ha lo scopo di addestrare alcuni **modelli** di predizione per il nostro dataset basati su **Reti neurali artificiali (ANN)**. Per farlo, questa volta cercheremo di utilizzare una procedura automatizzata tramite **grid search**."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bIMtKdcy_uz9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "7a13ea48-e39b-42d9-a418-4de54eb995dc"
      },
      "source": [
        "%autosave 30\n",
        "%matplotlib inline\n",
        "\n",
        "import os\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (30, 8)\n",
        "\n",
        "import joblib\n",
        "from datetime import datetime\n",
        "\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import GridSearchCV, StratifiedKFold, KFold\n",
        "from sklearn.metrics import r2_score, mean_squared_error, max_error\n",
        "\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn import tree\n",
        "from sklearn.externals.six import StringIO\n",
        "\n",
        "\n",
        "import pydotplus\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "from google.colab import drive\n",
        "import pandas as pd\n",
        "import os\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import GridSearchCV, StratifiedKFold\n",
        "from sklearn.metrics import r2_score, mean_squared_error, max_error\n",
        "\n",
        "import tensorflow as tf\n",
        "import keras\n",
        "from keras.models import Sequential, load_model\n",
        "from keras.layers import Dense, Input, Dropout\n",
        "from keras.optimizers import SGD\n",
        "from keras.wrappers.scikit_learn import KerasRegressor\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "IPython.notebook.set_autosave_interval(30000)"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Autosaving every 30 seconds\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "obA8TLWX_u0M",
        "colab_type": "text"
      },
      "source": [
        "### SECONDO MODELLO: preparazione dei datasets ###\n",
        "\n",
        "**Carichiamo** il dataset, impostiamo il random state ed effettuiamo la trasformazione degli attributi categorici come fatto nel notebook precedente."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tyVV2r-6_u0R",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#df_2 = pd.read_csv(\"dataset_finale_medie_2_week_rnd1.csv\", parse_dates=[\"Data\"], infer_datetime_format=True)\n",
        "#df_1 = pd.read_csv(\"/content/drive/Shared drives/MLDM progetto/Datasets/dataset_finale_medie_1_week.csv\", parse_dates=[\"Data\"], infer_datetime_format=True)\n",
        "df = pd.read_csv(\"/dataset_finale_medie_rnd1.csv\", parse_dates=[\"Data\"], infer_datetime_format=True)\n",
        "\n",
        "rnd_state = 12345\n",
        "predictor_columns = [\n",
        "                     'pass_Ammoniaca', \n",
        "                     'pass_Benzene',\n",
        "       'pass_Biossido di Azoto', \n",
        "       'pass_Biossido di Zolfo',\n",
        "       'pass_Monossido di Azoto', \n",
        "       'pass_Monossido di Carbonio',\n",
        "       'pass_Ossidi di Azoto', \n",
        "       'pass_Ozono', \n",
        "       'pass_PM10 (SM2005)',\n",
        "       'pass_Particelle sospese PM2.5',\n",
        "       'pass_Radiazione Globale', \n",
        "       'pass_Temperatura',\n",
        "       'pass_deceduti',\n",
        "       'pass_nuovi_positivi',\n",
        "       'pass_ricoverati_con_sintomi', \n",
        "       'pass_tamponi']\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_AWyBoQ4_u0a",
        "colab_type": "text"
      },
      "source": [
        "Prepariamo **training** set e **test** set."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qXr69DhZ_u0d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train = df.sample(frac=0.8, random_state=rnd_state)\n",
        "test = df.drop(train.index)\n",
        "\n",
        "train_X = train[predictor_columns]\n",
        "train_y = train[\"fut1_nuovi_positivi\"]\n",
        "\n",
        "test_X = test[predictor_columns]\n",
        "test_y = test[\"fut1_nuovi_positivi\"]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2vCk-PBs_u0l",
        "colab_type": "text"
      },
      "source": [
        "### SECONDO MODELLO: training ###\n",
        "\n",
        "Per prima cosa, abbiamo bisogno di una **funzione** che crei un **modello (ANN)** con **keras**."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XtU_qylU_u0m",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def create_model(input_shape=(len(predictor_columns),), \n",
        "                 units_1L=8, units_2L=5, kernel_init=\"uniform\",\n",
        "                 activation_type_1L=\"relu\", activation_type_2L=\"relu\", activation_type_out=\"linear\",\n",
        "                 loss=\"mse\", optimizer=\"adam\", metrics=[\"mae\", \"mse\"]):\n",
        "    \n",
        "    model = Sequential()\n",
        "    model.add(Dense(units_1L, activation=\"relu\", input_shape=input_shape, kernel_initializer=kernel_init))\n",
        "    model.add(Dense(units_2L, activation=\"relu\"))\n",
        "    model.add(Dense(1, activation=\"linear\"))\n",
        "    model.compile(loss=loss, optimizer=optimizer, metrics=metrics)\n",
        "    return model"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6XaHjL4k_u0v",
        "colab_type": "text"
      },
      "source": [
        "Traduciamo il modello di **keras** in un **modello compatibile** con i metodi di grid search del package **sklearn**. Per farlo, sfruttiamo l'interfaccia KerasRegressor."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FU3ET6Qv_u0w",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "keras_regressor = KerasRegressor(build_fn=create_model, epochs=100, batch_size=10, validation_split=0.2, verbose=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xDYu9YaU_u05",
        "colab_type": "text"
      },
      "source": [
        "Definiamo la **Pipeline**:\n",
        "* imputer\n",
        "* addestramento del modello"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gar8ryk8_u07",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pipeline = Pipeline([(\"imp\", SimpleImputer(missing_values=np.nan, strategy=\"mean\")), \n",
        "                     (\"kr\", keras_regressor)])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MQB5W6D0_u1B",
        "colab_type": "text"
      },
      "source": [
        "Prepariamo gli **iper-parametri** per la grid search."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9W-gu0t6_u1C",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "units_1L_list = [8]\n",
        "units_2L_list = [5, 10]\n",
        "kernel_init_list = [\"uniform\"]\n",
        "\n",
        "activation_type_list =  [\"tanh\", \"relu\"]\n",
        "\n",
        "loss_list = [\"mse\"]\n",
        "optimizer_list = [\"Adam\"]\n",
        "metrics_list = [\"mae\", \"mse\"]\n",
        "\n",
        "epochs_list = [80, 120]\n",
        "batch_size_list = [10]\n",
        "validation_split_list = [0.2]\n",
        "\n",
        "\n",
        "param_grid = {\"kr__epochs\": epochs_list,\n",
        "              \"kr__batch_size\": batch_size_list,\n",
        "              \"kr__validation_split\": validation_split_list,\n",
        "              \n",
        "              \"kr__units_1L\": units_1L_list,\n",
        "              \"kr__units_2L\": units_2L_list,\n",
        "              \"kr__kernel_init\": kernel_init_list,\n",
        "              \n",
        "              \"kr__activation_type_1L\": activation_type_list,\n",
        "              \"kr__activation_type_2L\": activation_type_list,\n",
        "              \"kr__activation_type_out\": [\"linear\"],\n",
        "              \n",
        "              \"kr__loss\": loss_list,\n",
        "              \"kr__optimizer\": optimizer_list,\n",
        "              \"kr__metrics\": metrics_list}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zszMbJuP_u1J",
        "colab_type": "text"
      },
      "source": [
        "**Addestriamo** il regressore mediante **grid search** e **k-fold** cross validation. Utilizziamo k non superiore a 5 in modo da avere degli insiemi statisticamente significativi (con almeno 30 elementi)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bt9RuP_B_u1K",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 531
        },
        "outputId": "2b7635aa-3ac4-4419-a565-ed1a852d70fa"
      },
      "source": [
        "kfold_splits = 4\n",
        "grid_regressor = GridSearchCV(estimator=pipeline,  \n",
        "                              n_jobs=-1, \n",
        "                              verbose=1,\n",
        "                              return_train_score=True,\n",
        "                              cv=KFold(n_splits=kfold_splits, shuffle=True, random_state=rnd_state),\n",
        "                              param_grid=param_grid)\n",
        "\n",
        "grid_regressor.fit(train_X, train_y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 4 folds for each of 32 candidates, totalling 128 fits\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  46 tasks      | elapsed:  1.6min\n",
            "[Parallel(n_jobs=-1)]: Done 128 out of 128 | elapsed:  4.6min finished\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=KFold(n_splits=4, random_state=12345, shuffle=True),\n",
              "             error_score=nan,\n",
              "             estimator=Pipeline(memory=None,\n",
              "                                steps=[('imp',\n",
              "                                        SimpleImputer(add_indicator=False,\n",
              "                                                      copy=True,\n",
              "                                                      fill_value=None,\n",
              "                                                      missing_values=nan,\n",
              "                                                      strategy='mean',\n",
              "                                                      verbose=0)),\n",
              "                                       ('kr',\n",
              "                                        <tensorflow.python.keras.wrappers.scikit_learn.KerasRegressor object at 0x7f9d8c993ac8>)],\n",
              "                                verbose=False),\n",
              "             iid='dep...\n",
              "                         'kr__activation_type_2L': ['tanh', 'relu'],\n",
              "                         'kr__activation_type_out': ['linear'],\n",
              "                         'kr__batch_size': [10], 'kr__epochs': [80, 120],\n",
              "                         'kr__kernel_init': ['uniform'], 'kr__loss': ['mse'],\n",
              "                         'kr__metrics': ['mae', 'mse'],\n",
              "                         'kr__optimizer': ['Adam'], 'kr__units_1L': [8],\n",
              "                         'kr__units_2L': [5, 10],\n",
              "                         'kr__validation_split': [0.2]},\n",
              "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
              "             scoring=None, verbose=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2Oz4-q_G_u1R",
        "colab_type": "text"
      },
      "source": [
        "### SECONDO MODELLO: testing ###\n",
        "\n",
        "Processiamo i dati di test come avevamo fatto per il training e procediamo alla fase di testing del **miglior regressore**, addestrato mediante grid search."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g_BdGljO_u1S",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_regressor = grid_regressor.best_estimator_[\"kr\"].model\n",
        "\n",
        "imputer = SimpleImputer(missing_values=np.nan, strategy=\"mean\")\n",
        "imputer = imputer.fit(test_X)\n",
        "test_X_imp = imputer.transform(test_X)\n",
        "\n",
        "predicted = best_regressor.predict(test_X_imp)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YsCfLvkE_u1Z",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "384913b1-3e19-4ca7-e1b1-8378e8e18eda"
      },
      "source": [
        "plt.plot(predicted, label=\"nuovi_positivi_pred\")\n",
        "plt.plot(test_y.values, label=\"nuovi_positivi\")\n",
        "plt.legend()\n",
        "plt.title(\"Risultati della ANN addestrata con grid search\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 2160x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3smxGHRW_u1h",
        "colab_type": "text"
      },
      "source": [
        "### MODELLO: valutazione ed osservazioni ###\n",
        "\n",
        "La prima cosa che si nota è che, anche in questo caso, la predizione è abbastanza **verosimile**.\n",
        "La differenza rispetto al **primo modello**, addestrato manualmente senza grid search, è minima; entrambi si comportano abbastanza bene.\n",
        "\n",
        "La bontà dei modelli potrebbe esser data da due fattori:\n",
        "- **pochi dati** a disposizione per il training e per il testing: quest'ultimo potrebbe essere poco significativo.\n",
        "- buon lavoro di **pre-processing** sui dati: outliers e missing values sono stati meticolosamente trattati in maniera che non andassero a disturbare l'apprendimento dei modelli.\n",
        "\n",
        "Considerata la circostanza, ci riteniamo comunque soddisfatti del lavoro.\n",
        "\n",
        "Vediamo le **caratteristiche** della migliore rete neurale trovata."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bGebL5Dg_u1i",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "outputId": "25461eea-3159-4f2d-8f67-ce435e61351e"
      },
      "source": [
        "grid_regressor.best_params_"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'kr__activation_type_1L': 'tanh',\n",
              " 'kr__activation_type_2L': 'relu',\n",
              " 'kr__activation_type_out': 'linear',\n",
              " 'kr__batch_size': 10,\n",
              " 'kr__epochs': 120,\n",
              " 'kr__kernel_init': 'uniform',\n",
              " 'kr__loss': 'mse',\n",
              " 'kr__metrics': 'mae',\n",
              " 'kr__optimizer': 'Adam',\n",
              " 'kr__units_1L': 8,\n",
              " 'kr__units_2L': 10,\n",
              " 'kr__validation_split': 0.2}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qUTLoKya_u1s",
        "colab_type": "text"
      },
      "source": [
        "Come si evince, la rete neurale migliore è stata addestrata in **120 epoche** con **batch size 10**. Essa è formata da:\n",
        "* 8 unità di input di tipo **relu**\n",
        "* 10 unità nascoste di tipo **tanh**\n",
        "* 1 unità di output di tipo **linear**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kyrlQVik_u1t",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "outputId": "08f8ba65-b6fe-4034-92d9-c675e0839541"
      },
      "source": [
        "print(f\"R2: \\t\\t{r2_score(test_y, predicted):.3}\")\n",
        "print(f\"RMSE: \\t\\t{mean_squared_error(test_y, predicted, squared=False):.3}\")\n",
        "print(f\"MAX ERR: \\t{max_error(test_y, predicted)}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "R2: \t\t0.263\n",
            "RMSE: \t\t6.38e+02\n",
            "MAX ERR: \t2693.7330932617188\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qC04oIDk_u1z",
        "colab_type": "text"
      },
      "source": [
        "Possiamo **osservare** che le performance della miglior rete neurale trovata sono abbastanza **buone**.\n",
        "\n",
        "**R2** è **0.885**, ampiamente superiore a 0.5 ed abbastanza vicino al massimo (1). Il modello spiega gran parte della varianza dei dati.\n",
        "\n",
        "**RMSE** è 61.7, pertanto il nostro modello in media sbaglia il conteggio dei nuovi positivi di 63 unità. Seppur di primo acchitto sembri eccessivo, in realtà non lo è se si pensa che in alcune giornate sono stati registrati più di 1000 nuovi positivi.\n",
        "\n",
        "**MAX ERR** è 261.64. Dal grafico si nota come in un preciso giorno il predittore sbagli parecchio. Questo errore molto pronunciato va ad influenzare negativamente l'RMSE."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "arkD47J8_u10",
        "colab_type": "text"
      },
      "source": [
        "### Salvataggio e caricamento del modello ###\n",
        "\n",
        "**Salviamo** il modello migliore trovato."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MGEck_u9_u12",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 172
        },
        "outputId": "880f921a-f027-4412-b3ba-709a305ec917"
      },
      "source": [
        "save_keras_model(\"ANN-grid\", best_regressor)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-27-cd683380b80c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msave_keras_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ANN-grid\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbest_regressor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'save_keras_model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m7dLjtGT_u18",
        "colab_type": "text"
      },
      "source": [
        "**Carichiamo** il modello appena salvato per verificare che non ci siano stati errori nel salvataggio."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VvDKsw8G_u1-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "loaded_model = keras.models.load_model(\"models/ANN-grid-08-07-2020 17h17\")\n",
        "\n",
        "loaded_predicted = loaded_model.predict(test_X_imp)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pfEMm7v9_u2C",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
